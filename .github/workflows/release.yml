name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Get dependencies
        run: go mod download

      - name: Install Fyne CLI
        run: |
          go install fyne.io/tools/cmd/fyne@latest
          echo "Installed Fyne CLI successfully"

      - name: Package with Fyne
        run: |
          $version = "${{ github.ref_name }}".TrimStart('v')
          Write-Host "Building with version: $version"
          # Package the application with Fyne using semantic versioning
          fyne package -os windows -icon icon.png -name csres --app-version $version --app-build ${{ github.run_number }}
          echo "Built and packaged application with Fyne successfully"

      - name: Test build
        run: |
          # Test version output
          ./csres.exe --version
          echo "Application built and version check successful"

      - name: Compress with UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: |
            ./csres.exe
          args: -fq

      - name: Rename to final name
        run: |
          # Rename the compressed file to the final name
          Move-Item "csres.exe" "CS Resolution Monitor.exe"
          echo "Renamed compressed file to final name"

      - name: Create zip file
        run: |
          # Create a zip file with the executable and config example
          Compress-Archive -Path "CS Resolution Monitor.exe", "config.example.json" -DestinationPath "CS Resolution Monitor.zip" -Force
          echo "Created zip file with executable and config"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            ## CS Resolution Monitor ${{ github.ref_name }}

            Automatically built from commit ${{ github.sha }}

            ### üéØ What's New in This Release

            **Enhanced Multi-Monitor Support**
            - Improved resolution selection logic in GUI
            - Better monitor name detection via WMI
            - Enhanced configuration and GUI for resolution management
            - Fixed resolution restoration after game closes

            **Core Features**
            - **Multi-Monitor Support**: Target specific monitors for resolution changes
            - **Auto Resolution Switching**: Changes resolution when Counter-Strike 2 or other configured apps start
            - **Live Config Reload**: Update settings without restarting the application
            - **Graceful Restoration**: Restores original resolution when applications close
            - **Process Monitoring**: Continuously monitors for target applications
            - **Multiple Application Support**: Can monitor multiple applications simultaneously

            ### üöÄ Installation
            1. Download `CS Resolution Monitor.exe` from the assets below
            2. Run the application to generate a default `config.json`
            3. Edit the configuration to add your applications and target resolutions
            4. Run again to start monitoring

            ### ‚öôÔ∏è Configuration Example
            ```json
            {
              "default_resolution": {"width": 1920, "height": 1080, "frequency": 144},
              "default_monitor": "\\\\.\\DISPLAY1",
              "applications": [
                {
                  "process_name": "cs2.exe",
                  "resolution": {"width": 1280, "height": 960, "frequency": 144},
                  "monitor_name": "\\\\.\\DISPLAY1"
                }
              ],
              "poll_interval": 2
            }
            ```

            ### üîß How It Works
            1. **Monitor Detection**: Enumerates available monitors and their current resolutions
            2. **Process Monitoring**: Continuously scans running processes every `poll_interval` seconds
            3. **Resolution Changes**: When a monitored application starts, changes the specified monitor to its configured resolution
            4. **Per-Monitor Tracking**: Tracks resolution changes per monitor, allowing different apps on different monitors
            5. **Restoration**: When applications close, restores the default resolution only on monitors that were changed

            ### üìã System Requirements
            - Windows 10/11
            - Administrator privileges may be required for resolution changes

            **Full Changelog**: https://github.com/${{ github.repository }}/commits/main
          files: |
            CS Resolution Monitor.zip
            config.example.json
          draft: false
          prerelease: false
